name: CI + Publish
on:
  push:
    branches:
      - main
    tags:
      - "*"
  pull_request:
    branches:
      - main
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      deno-version:
        type: string
        description: 'Deno version or tag to use'
        default: 'canary'
      deno-test:
        type: boolean
        description: 'Run deno test?'
        default: true
      deno-doctest:
        type: boolean
        description: 'Run deno test --doc?'
        default: false
      deno-fmt:
        type: boolean
        description: 'Run deno fmt?'
        default: true
      deno-lint:
        type: boolean
        description: 'Run deno lint?'
        default: true
      deno-doc:
        description: 'Run deno doc?'
        type: choice
        options:
          - 'none'
          - 'lint'
          - 'html'
          - 'json'
      deno-publish:
        type: boolean
        description: 'Publish to JSR?'
        default: true
jobs:
  style:
    name: Code Style
    runs-on: ubuntu-latest
    timeout-minutes: 15
    concurrency: style
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ github.event.inputs.deno-version || 'canary' }}

      - name: deno fmt
        if: |
          github.event_name != 'workflow_dispatch' ||
          github.event.inputs.deno-fmt == 'true'
        run: deno fmt --check

      - name: deno lint
        if: |
          github.event_name != 'workflow_dispatch' ||
          github.event.inputs.deno-lint == 'true'
        run: deno lint

      - name: deno doc --lint
        if: |
          github.event_name != 'workflow_dispatch' ||
          github.event.inputs.deno-doc == 'lint'
        run: deno doc --lint mod.ts

  tests:
    name: Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    concurrency: tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ github.event.inputs.deno-version || 'canary' }}

      - name: deno test
        if: |
          github.event_name != 'workflow_dispatch' ||
          github.event.inputs.deno-test == 'true'
        run: deno test -A --no-check=remote --parallel

      - name: deno test --doc
        if: |
          github.event_name != 'workflow_dispatch' ||
          github.event.inputs.deno-doctest == 'true'
        run: deno test -A --no-check=remote --parallel --doc

  publish:
    name: Publish
    needs: [style, tests]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: |
      (
        github.event_name == 'release' &&
        github.event.action == 'published'
      ) || (
        github.event_name == 'workflow_dispatch' &&
        github.event.inputs.deno-publish == 'true'
      ) || (
        github.event_name == 'push' &&
        startsWith(github.ref, 'refs/tags/')
      )
    concurrency:
      group: publish-${{ github.ref_name }}
      cancel-in-progress: true
    permissions:
      contents: write
      id-token: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Publish to JSR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx jsr publish --dry-run --allow-dirty && \
          npx jsr publish --allow-dirty
